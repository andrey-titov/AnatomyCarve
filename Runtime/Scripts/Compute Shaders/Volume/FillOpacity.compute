// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#pragma multi_compile _ SEGMENT_CARVING

#define FXAA_WINDOW_DIMENSION 3

//#pragma multi_compile _ HISTOGRAM // Slicer-like or Histogram

float4 Dimensions;
Texture3D<float> LabelMap;
Texture3D<float> Intensities;
Texture3D<float4> LabelMapDilated;

//#if HISTOGRAM
//sampler2D SegmentHistogram;
//float4 SegmentHistogramDimensions;
//#endif

Texture2D<float> SegmentOpacities;

sampler2D OpacityTF;

#if SEGMENT_CARVING
Texture3D<half> CarvingMap;
#endif

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture3D<float> OpacityMap;

static int3 dimensions;



//float opacitySingleLabel(int3 ida)
//{
//    float intensity = Intensities[ida];
//    float label = LabelMap[ida];
    
//    float4 index = float4((float(label) + 0.5) / SegmentHistogramDimensions.x, intensity, 0, 0);
//    float factor = tex2Dlod(SegmentHistogram, index).r;
    
//    if (label == 0)
//    {
//        factor = 0;
//    }
    
//    return factor;
//}

//int readHistogram(int3 ida, out int4 labels, out float4 factors)
//{
//    labels = LabelMapDilated[ida];
//    factors = float4(0, 0, 0, 0);

//    int numLabels = labels[1] == -1 ? 1 : (labels[2] == -1 ? 2 : (labels[3] == -1 ? 3 : (4)));
    
//    float intensity = Intensities[ida];
    
//    [unroll]
//    for (int i = 0; i < numLabels; i++)
//    {
//        float4 index = float4((float(labels[i]) + 0.5) / SegmentHistogramDimensions.x, intensity, 0, 0);
//        factors[i] = tex2Dlod(SegmentHistogram, index).r;
//    }

//    return numLabels;
//}

//float opacityMultiLabel(int3 ida)
//{
//    int4 labels;
//    float4 factors;
//    int numLabels = readHistogram(ida, labels, factors);
    
//    [unroll]
//    for (int i = 0; i < 4; i++)
//    {
//        //if (labels[i] == 0)
//        //{
//        //    factors[i] = 0;
//        //}
        
//        factors[i] *= SegmentOpacities[int2(labels[i], 0)];
//    }
    
//    float opacity = (factors.r + factors.g + factors.b + factors.a) / (float) numLabels;
    
//    return opacity;
//}


//float opacityIntensity(int3 ida)
//{
//    float intensity = Intensities[ida];
//    float opacity = intensity * SegmentOpacities[int2(LabelMap[ida], 0)];
//    return opacity;
//}

//float opacityIntensityBlur(int3 ida)
//{
//    float opacity = 0;
//    float total = 0;
//    {    
//        for (int i = -1; i <= 1; i++)
//        {
//            for (int j = -1; j <= 1; j++)
//            {
//                for (int k = -1; k <= 1; k++)
//                {
//                    float power = 3 - abs(i) - abs(j) - abs(k);
//                    float factor = pow(2.0, power);
//                    int3 idaBlur = ida + int3(i, j, k);
//                    opacity += Intensities[idaBlur] * SegmentOpacities[int2(LabelMap[idaBlur], 0)] * factor;
//                    total += factor;

//                }
//            }
//        }
//    }
//    opacity /= total;
    
//    return opacity;
//}

//// Assumes voxelGrid is a 3x3x3 grid of luminance values.
//// fx, fy, fz are the coordinates of the focal voxel in the 3x3x3 grid, usually the center voxel (1, 1, 1).
//float ApplyFXAA4(float voxelGrid[3][3][3], int fx, int fy, int fz)
//{
//    float focalLuma = voxelGrid[fx][fy][fz];
    
//    // Collect neighboring luma values
//    float lumaMip1 = voxelGrid[fx + 1][fy][fz];
//    float lumaMim1 = voxelGrid[fx - 1][fy][fz];
//    float lumaPim1 = voxelGrid[fx][fy + 1][fz];
//    float lumaPip1 = voxelGrid[fx][fy - 1][fz];

//    // Compute luma derivatives
//    float lumaDX = lumaMip1 - lumaMim1;
//    float lumaDY = lumaPip1 - lumaPim1;
    
//    // FXAA edge threshold
//    float edgeThreshold = 0.2;
    
//    // Check for an edge
//    if (abs(lumaDX) + abs(lumaDY) > edgeThreshold)
//    {
//        // Calculate anti-aliased luma, for example, by averaging neighbors
//        float antiAliasedLuma = (lumaMip1 + lumaMim1 + lumaPim1 + lumaPip1) * 0.25;
        
//        return antiAliasedLuma;
//    }
//    else
//    {
//        // No anti-aliasing needed
//        return focalLuma;
//    }
//}

//// Assumes voxelGrid is a 3x3x3 grid of luminance values.
//// fx, fy, fz are the coordinates of the focal voxel in the 3x3x3 grid, usually the center voxel (1, 1, 1).
//float ApplyFXAA8(float voxelGrid[3][3][3], int fx, int fy, int fz)
//{
//    float focalLuma = voxelGrid[fx][fy][fz];
    
//    // Collect neighboring luma values
//    float luma000 = voxelGrid[fx - 1][fy - 1][fz];
//    float luma001 = voxelGrid[fx + 1][fy - 1][fz];
//    float luma010 = voxelGrid[fx - 1][fy + 1][fz];
//    float luma011 = voxelGrid[fx + 1][fy + 1][fz];
//    float luma100 = voxelGrid[fx][fy - 1][fz - 1];
//    float luma101 = voxelGrid[fx][fy - 1][fz + 1];
//    float luma110 = voxelGrid[fx][fy + 1][fz - 1];
//    float luma111 = voxelGrid[fx][fy + 1][fz + 1];
    
//    //float luma000 = voxelGrid[fx - 1][fy - 1][fz - 1];
//    //float luma001 = voxelGrid[fx - 1][fy - 1][fz + 1];
//    //float luma010 = voxelGrid[fx - 1][fy + 1][fz - 1];
//    //float luma011 = voxelGrid[fx - 1][fy + 1][fz + 1];
//    //float luma100 = voxelGrid[fx + 1][fy - 1][fz - 1];
//    //float luma101 = voxelGrid[fx + 1][fy - 1][fz + 1];
//    //float luma110 = voxelGrid[fx + 1][fy + 1][fz - 1];
//    //float luma111 = voxelGrid[fx + 1][fy + 1][fz + 1];

//    // Compute luma derivatives (differences between diagonals)
//    float lumaDX1 = luma001 - luma000;
//    float lumaDX2 = luma011 - luma010;
//    float lumaDY1 = luma101 - luma100;
//    float lumaDY2 = luma111 - luma110;

//    // Combine the derivatives to find edge intensity
//    float edgeIntensity = abs(lumaDX1) + abs(lumaDX2) + abs(lumaDY1) + abs(lumaDY2);
    
//    // FXAA edge threshold
//    float edgeThreshold = 0.3;
    
//    // Check for an edge
//    if (edgeIntensity > edgeThreshold)
//    {
//        // Calculate anti-aliased luma by averaging neighbors
//        float antiAliasedLuma = (luma000 + luma001 + luma010 + luma011 +
//                                 luma100 + luma101 + luma110 + luma111) * 0.125;
        
//        return antiAliasedLuma;
//    }
//    else
//    {
//        // No anti-aliasing needed
//        return focalLuma;
//    }
//}

//// Assumes voxelGrid is a 3x3x3 grid of luminance values.
//// fx, fy, fz are the coordinates of the focal voxel in the 3x3x3 grid, usually the center voxel (1, 1, 1).
//float ApplyFXAAnew(float voxelGrid[3][3][3], int fx, int fy, int fz)
//{
//    float focalLuma = voxelGrid[fx][fy][fz];
    
//    // Collect neighboring luma values from all corners of the 3x3x3 cube
//    float luma000 = voxelGrid[0][0][0];
//    float luma001 = voxelGrid[0][0][2];
//    float luma010 = voxelGrid[0][2][0];
//    float luma011 = voxelGrid[0][2][2];
//    float luma100 = voxelGrid[2][0][0];
//    float luma101 = voxelGrid[2][0][2];
//    float luma110 = voxelGrid[2][2][0];
//    float luma111 = voxelGrid[2][2][2];

//    // Compute luma derivatives (differences between diagonals)
//    float lumaDX1 = luma001 - luma000;
//    float lumaDX2 = luma011 - luma010;
//    float lumaDY1 = luma101 - luma100;
//    float lumaDY2 = luma111 - luma110;

//    // Combine the derivatives to find edge intensity
//    float edgeIntensity = abs(lumaDX1) + abs(lumaDX2) + abs(lumaDY1) + abs(lumaDY2);
    
//    // FXAA edge threshold
//    float edgeThreshold = 0.2;
    
//    // Check for an edge
//    if (edgeIntensity > edgeThreshold)
//    {
//        // Calculate anti-aliased luma by averaging the 8 corner neighbors
//        float antiAliasedLuma = (luma000 + luma001 + luma010 + luma011 +
//                                 luma100 + luma101 + luma110 + luma111) * 0.125;
        
//        return antiAliasedLuma;
//    }
//    else
//    {
//        // No anti-aliasing needed
//        return focalLuma;
//    }
//}

//// Assumes voxelGrid is a 3x3x3 grid of luminance values.
//// The function performs FXAA-like anti-aliasing and returns the anti-aliased value for the central voxel.
//float Apply3x3x3FXAA(float voxelGrid[3][3][3])
//{
//    // Luminance of the central voxel
//    float centralLuma = voxelGrid[1][1][1];

//    // Sum all the neighboring luminance values
//    float lumaSum = 0.0;
//    int neighborCount = 0;
//    for (int x = 0; x < 3; ++x)
//    {
//        for (int y = 0; y < 3; ++y)
//        {
//            for (int z = 0; z < 3; ++z)
//            {
//                if (x != 1 || y != 1 || z != 1)
//                { // Exclude the central voxel
//                    lumaSum += voxelGrid[x][y][z];
//                    neighborCount++;
//                }
//            }
//        }
//    }

//    // Compute average neighboring luminance
//    float lumaAvg = lumaSum / (float) neighborCount;

//    // Compute edge intensity based on the difference between central voxel and average luminance
//    float edgeIntensity = abs(centralLuma - lumaAvg);

//    // FXAA edge threshold
//    float edgeThreshold = 0.2;

//    // Check for an edge
//    if (edgeIntensity > edgeThreshold)
//    {
//        // Compute anti-aliased luminance as an average between the central luma and the neighboring average
//        float antiAliasedLuma = (centralLuma + lumaAvg) * 0.5;
//        return antiAliasedLuma;
//    }
//    else
//    {
//        // No anti-aliasing needed
//        return centralLuma;
//    }
//}

//float3 Apply3DFXAA(float lumenWindow[5][5][5])
//{
//    // Central value coordinates
//    int x = 2;
//    int y = 2;
//    int z = 2;

//    // Initialize variables for edge detection
//    float edgeThreshold = 0.1; // Threshold for edge detection (adjust as needed)
//    float finalColor = lumenWindow[x][y][z];
//    float blendWeight = 0.0;
//    int count = 0;
    
//    int i;

//    // Perform edge detection and calculate blend weight
//    for (i = -1; i <= 1; ++i)
//    {
//        for (int j = -1; j <= 1; ++j)
//        {
//            for (int k = -1; k <= 1; ++k)
//            {
//                if (i == 0 && j == 0 && k == 0)
//                    continue;

//                float neighborLumen = lumenWindow[x + i][y + j][z + k];
//                float difference = abs(neighborLumen - finalColor);

//                // Check if the difference between the central pixel and its neighbor is above the threshold
//                if (difference > edgeThreshold)
//                {
//                    blendWeight += difference;
//                    count++;
//                }
//            }
//        }
//    }

//    // Calculate average blend weight
//    if (count > 0)
//    {
//        blendWeight /= count;
//    }

//    // Blend central color with neighboring pixels
//    finalColor *= (1.0 - blendWeight);
//    for (i = -1; i <= 1; ++i)
//    {
//        for (int j = -1; j <= 1; ++j)
//        {
//            for (int k = -1; k <= 1; ++k)
//            {
//                if (i == 0 && j == 0 && k == 0)
//                    continue;

//                float neighborLumen = lumenWindow[x + i][y + j][z + k];
//                finalColor += neighborLumen * blendWeight / count;
//            }
//        }
//    }

//    return finalColor;
//}

//float Apply3DFXAA_3x3x3(float lumenWindow[3][3][3])
//{
//    // Central value coordinates
//    int x = 1;
//    int y = 1;
//    int z = 1;

//    // Initialize variables for edge detection
//    float edgeThreshold = 0.1; // Threshold for edge detection (adjust as needed)
//    float finalColor = lumenWindow[x][y][z];
//    float blendWeight = 0.0;
//    int count = 0;

//    // Perform edge detection and calculate blend weight
//    {
//        for (int i = -1; i <= 1; ++i)
//        {
//            for (int j = -1; j <= 1; ++j)
//            {
//                for (int k = -1; k <= 1; ++k)
//                {
//                    if (i == 0 && j == 0 && k == 0)
//                        continue;

//                    float neighborLumen = lumenWindow[x + i][y + j][z + k];
//                    float difference = abs(neighborLumen - finalColor);

//                    // Check if the difference between the central pixel and its neighbor is above the threshold
//                    if (difference > edgeThreshold)
//                    {
//                        blendWeight += difference;
//                        count++;
//                    }
//                }
//            }
//        }
//    }

//    // Calculate average blend weight
//    if (count > 0)
//    {
//        blendWeight /= count;
        
//        // Blend central color with neighboring pixels
//        //finalColor *= (1.0 - blendWeight);
//        float blendColor = 0;
//        for (int i = -1; i <= 1; ++i)
//        {
//            for (int j = -1; j <= 1; ++j)
//            {
//                for (int k = -1; k <= 1; ++k)
//                {
//                    if (i == 0 && j == 0 && k == 0)
//                        continue;

//                    float neighborLumen = lumenWindow[x + i][y + j][z + k];
//                    blendColor += neighborLumen / 26;
//                }
//            }
//        }
        
//        finalColor = lerp(finalColor, blendColor, blendWeight);

//    }

    

//    return finalColor;
//}

//float Apply3DFXAA_3x3x3v2(float lumenWindow[3][3][3])
//{
//    // Central value coordinates
//    int x = 1;
//    int y = 1;
//    int z = 1;

//    // Initialize variables for edge detection
//    float edgeThreshold = 0.1; // Threshold for edge detection (adjust as needed)
//    float finalColor = lumenWindow[x][y][z];
//    float blendWeight = 0.0;
//    int count = 0;

//    // Perform edge detection and calculate blend weight
//    for (int i = -1; i <= 1; ++i)
//    {
//        for (int j = -1; j <= 1; ++j)
//        {
//            for (int k = -1; k <= 1; ++k)
//            {
//                if (i == 0 && j == 0 && k == 0)
//                    continue;

//                float neighborLumen = lumenWindow[x + i][y + j][z + k];
//                float difference = abs(neighborLumen - finalColor);

//                // Check if the difference between the central pixel and its neighbor is above the threshold
//                if (difference > edgeThreshold)
//                {
//                    blendWeight += difference;
//                    count++;
//                }
//            }
//        }
//    }

//    // Adjust final color based on detected edges
//    if (count > 0)
//    {
//        // Calculate average blend weight
//        blendWeight /= count;

//        // Blend central color with neighboring pixels
//        finalColor *= (1.0 - blendWeight);
//        for (int i = -1; i <= 1; ++i)
//        {
//            for (int j = -1; j <= 1; ++j)
//            {
//                for (int k = -1; k <= 1; ++k)
//                {
//                    if (i == 0 && j == 0 && k == 0)
//                        continue;

//                    float neighborLumen = lumenWindow[x + i][y + j][z + k];
//                    finalColor += neighborLumen * blendWeight / count;
//                }
//            }
//        }
//    }

//    return finalColor;
//}

float Apply3DFXAA_3x3x3_Fast(float lumenWindow[3][3][3])
{
    // Central value coordinates
    int x = 1;
    int y = 1;
    int z = 1;

    // Initialize variables for edge detection
    float edgeThreshold = 0.1; // Threshold for edge detection (adjust as needed)
    float finalColor = lumenWindow[x][y][z];
    float blendWeight = 0.0;
    int count = 0;
    float blendColor = 0;

    // Perform edge detection and calculate blend weight
    [unroll]
    for (int i = -1; i <= 1; ++i)
    {
        [unroll]
        for (int j = -1; j <= 1; ++j)
        {
            [unroll]
            for (int k = -1; k <= 1; ++k)
            {
                if (i == 0 && j == 0 && k == 0)
                    continue;

                float neighborLumen = lumenWindow[x + i][y + j][z + k];
                float difference = abs(neighborLumen - finalColor);

                // Check if the difference between the central pixel and its neighbor is above the threshold
                if (difference > edgeThreshold)
                {
                    blendWeight += difference;
                    count++;
                }
                    
                blendColor += neighborLumen / 26;
            }
        }
    }

    // Calculate average blend weight
    if (count > 0)
    {
        float blurAdj = 2.0;
        blendWeight /= count;
        blendWeight = 1.0 - pow(1.0 - blendWeight, blurAdj);
        finalColor = lerp(finalColor, blendColor, blendWeight);
    }    

    return finalColor;
}



float opacityIntensityFXAA(int3 ida)
{
    float voxelGrid[FXAA_WINDOW_DIMENSION][FXAA_WINDOW_DIMENSION][FXAA_WINDOW_DIMENSION];
    int substractValue = FXAA_WINDOW_DIMENSION / 2;
    
    for (int i = 0; i < FXAA_WINDOW_DIMENSION; i++)
    {
        for (int j = 0; j < FXAA_WINDOW_DIMENSION; j++)
        {
            for (int k = 0; k < FXAA_WINDOW_DIMENSION; k++)
            {
                int3 idaBlur = ida + int3(i, j, k) - int3(substractValue, substractValue, substractValue);
                int3 idaGrid = int3(i, j, k);
                
                float intensity = Intensities[idaBlur];
                float mask = SegmentOpacities[int2(LabelMap[idaBlur], 0)];
                float segmentCarvingValue = 1.0;                
                
#if SEGMENT_CARVING
                segmentCarvingValue = CarvingMap[idaBlur];
#endif

                voxelGrid[idaGrid.x][idaGrid.y][idaGrid.z] = intensity * mask * segmentCarvingValue; // tex2Dlod(OpacityTF, float4(intensity, 0, 0, 0)).r
            }
        }
    }
    
    return Apply3DFXAA_3x3x3_Fast(voxelGrid);

}

float opacitySlicer(int3 ida)
{
    float intensity = Intensities[ida];
    float mask = SegmentOpacities[int2(LabelMap[ida], 0)];
    float segmentCarvingValue = 1.0;
                
#if SEGMENT_CARVING
    segmentCarvingValue = CarvingMap[ida];
#endif

    return intensity * mask * segmentCarvingValue;
}

[numthreads(4,4,4)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int3 ida = int3(id.x, id.y, id.z);
    dimensions = int3(Dimensions.x, Dimensions.y, Dimensions.z);

    if (ida.x >= dimensions.x || ida.y >= dimensions.y || ida.z >= dimensions.z)
    {
        return;
    }
    
    OpacityMap[ida] = opacityIntensityFXAA(ida);    
}
