// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#pragma multi_compile _ HISTOGRAM // Slicer-like or Histogram

float4 Dimensions;
Texture3D<float> LabelMap;
Texture3D<float> Intensities;
Texture3D<float4> LabelMapDilated;
Texture2D<float4> SegmentColors;

#if HISTOGRAM
sampler2D SegmentHistogram;
float4 SegmentHistogramDimensions;
Texture2D<float> SegmentOpacities;
#endif

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture3D<float4> ColorMap;

static int3 dimensions;

//float4 getColorOpacityTF(float intensity)
//{
//    return tex2Dlod(ColorOpacityTF, float4(intensity, 0, 0, 0));
//}

// RGB to HSV conversion
float3 RGBToHSV(float3 rgb)
{
    float maxC = max(max(rgb.r, rgb.g), rgb.b);
    float minC = min(min(rgb.r, rgb.g), rgb.b);
    float delta = maxC - minC;

    float3 hsv;
    if (delta == 0)
        hsv.x = 0;
    else if (maxC == rgb.r)
        hsv.x = (60 * ((rgb.g - rgb.b) / delta) + 360) % 360;
    else if (maxC == rgb.g)
        hsv.x = (60 * ((rgb.b - rgb.r) / delta) + 120) % 360;
    else
        hsv.x = (60 * ((rgb.r - rgb.g) / delta) + 240) % 360;

    hsv.y = maxC == 0 ? 0 : delta / maxC;
    hsv.z = maxC;

    return hsv;
}

// HSV to RGB conversion
float3 HSVToRGB(float3 hsv)
{
    float c = hsv.z * hsv.y;
    float x = c * (1 - abs(fmod(hsv.x / 60, 2) - 1));
    float m = hsv.z - c;

    float3 rgb;

    if (hsv.x < 60)
        rgb = float3(c, x, 0);
    else if (hsv.x < 120)
        rgb = float3(x, c, 0);
    else if (hsv.x < 180)
        rgb = float3(0, c, x);
    else if (hsv.x < 240)
        rgb = float3(0, x, c);
    else if (hsv.x < 300)
        rgb = float3(x, 0, c);
    else
        rgb = float3(c, 0, x);

    rgb += m;

    return rgb;
}

#if HISTOGRAM
float colorSingleLabel(int3 ida)
{
    float intensity = Intensities[ida];
    float label = LabelMap[ida];
    
    float4 index = float4((float(label) + 0.5) / SegmentHistogramDimensions.x, intensity, 0, 0);
    float factor = tex2Dlod(SegmentHistogram, index).r;
    
    if (label == 0)
    {
        factor = 0;
    }
    
    return factor;
}

int readHistogram(int3 ida, out int4 labels, out float4 factors)
{
    labels = LabelMapDilated[ida];
    factors = float4(0, 0, 0, 0);

    int numLabels = labels[1] == -1 ? 1 : (labels[2] == -1 ? 2 : (labels[3] == -1 ? 3 : (4)));
    
    float intensity = Intensities[ida];
    
    [unroll]
    for (int i = 0; i < numLabels; i++)
    {
        float4 index = float4((float(labels[i]) + 0.5) / SegmentHistogramDimensions.x, intensity, 0, 0);
        factors[i] = tex2Dlod(SegmentHistogram, index).r;
    }

    return numLabels;
}

float4 colorMultiLabel(int3 ida)
{
    int4 labels;
    float4 factors;
    int numLabels = readHistogram(ida, labels, factors);
    
    float3 totalColor = float3(0, 0, 0);
    float factorsTotal = 0;
    float maskValue = 0;
    float maskValueTotal = 0;
    
    float3 color = float3(0, 0, 0); //getColorOpacityTF(Intensities[ida]).rgb;
    
    for (int i = 0; i < numLabels; i++)
    {
        float3 colorOfLabel = SegmentColors[int2(labels[i], 0)].rgb; //labels[i] == 0 ? color : lerp(color, SegmentColors[int2(labels[i], 0)].rgb, SegmentOpacity.xxx);
            
        float mask = SegmentOpacities[int2(labels[i], 0)];
            
        totalColor += colorOfLabel * factors[i] * mask;
        factorsTotal += factors[i] * mask;
        //maskValue += mask;
        //maskValueTotal += 1.0;            
    }
    
    totalColor /= factorsTotal;
    //maskValue /= maskValueTotal;
    
    return float4(totalColor, 1);
}

float4 colorMultiLabelHSV(int3 ida)
{
    int4 labels;
    float4 factors;
    int numLabels = readHistogram(ida, labels, factors);
    
    float3 totalColor = float3(0, 0, 0);
    float factorsTotal = 0;
    float maskValue = 0;
    float maskValueTotal = 0;
    
    float3 color = float3(0, 0, 0); //getColorOpacityTF(Intensities[ida]).rgb;
    
    for (int i = 0; i < numLabels; i++)
    {
        float3 colorOfLabel = SegmentColors[int2(labels[i], 0)].rgb; //labels[i] == 0 ? color : lerp(color, SegmentColors[int2(labels[i], 0)].rgb, SegmentOpacity.xxx);
            
        float mask = SegmentOpacities[int2(labels[i], 0)];
            
        totalColor += colorOfLabel * factors[i] * mask;
        factorsTotal += factors[i] * mask;
        //maskValue += mask;
        //maskValueTotal += 1.0;            
    }
    
    totalColor /= factorsTotal;
    //maskValue /= maskValueTotal;
    
    float3 originalHSV = RGBToHSV(totalColor);
    originalHSV.z = Intensities[ida] * 2.0;
    totalColor = HSVToRGB(originalHSV);
    
    return float4(totalColor, 1);
}
#endif

float4 colorOfTopSegment(int3 ida)
{
    int label = (int) LabelMapDilated[ida].x;
    return SegmentColors[int2(label, 0)];
}

[numthreads(4, 4, 4)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    int3 ida = int3(id.x, id.y, id.z);
    dimensions = int3(Dimensions.x, Dimensions.y, Dimensions.z);

    if (ida.x >= dimensions.x || ida.y >= dimensions.y || ida.z >= dimensions.z)
    {
        return;
    }
    
#if HISTOGRAM
    float4 color = colorMultiLabel(ida);
#else
    float4 color = colorOfTopSegment(ida);
#endif
    //float maskValue = SegmentOpacities[int2(LabelMap[ida], 0)];
    //color *= maskValue;
    
    //color.rgb *= color.a;
    
    ColorMap[ida] = color;
}
