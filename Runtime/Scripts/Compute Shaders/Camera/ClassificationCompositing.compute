// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#pragma multi_compile _ NO_CARVING

#pragma multi_compile SOLID_COLOR PHONG PHONG_SSAO LAO PHONG_LAO

#pragma multi_compile _ COLOR_LABEL COLOR_HISTOGRAM COLOR_UNIQUE_LABEL COLOR_SLICER
#pragma multi_compile _ SEGMENT_CARVING
//#pragma multi_compile _ COLOR_LABEL SEGMENT_COLOR DILATED_LABELS SMOOTH COLOR_HISTOGRAM

#pragma multi_compile _ SEGMENTED
//#pragma multi_compile __ SEGMENTED_MASK

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

#if PHONG || PHONG_LAO || PHONG_SSAO
sampler3D Normals;
float AmbientFactor;
float DiffuseFactor;
float SpecularFactor;
float SpecularExponent;
#endif
sampler3D Lao;
float LaoBrightness;

Texture2D<half4> PositionDepth;
Texture2D<float4> DirectionSteps;
#if COLOR_LABEL
sampler3D LabelMap;
Texture2D<half4> SegmentColors;
#elif COLOR_HISTOGRAM || COLOR_SLICER
sampler3D ColorMap;
#elif COLOR_UNIQUE_LABEL
sampler3D LabelMap;
static float3 previousLabelColor = float3(0, 0, 0);
#if SEGMENT_CARVING
sampler3D CarvingMap;
#endif
#endif

#if SEGMENTED
sampler3D OpacityMap;
#else
sampler3D Intensities;
sampler2D ColorOpacityTF;
float IntensityThreshold;
#endif

#if PHONG_SSAO
static const float SOBEL_MATRIX_3[][3] = { { 1, 2, 1 }, { 2, 4, 2 }, { 1, 2, 1 } };
static const float SOBEL_MATRIX_5[][5] = { 
{ 1, 2, 4, 2, 1 }, { 2, 4, 8, 4, 2 }, { 4, 8, 16, 8, 4 }, { 2, 4, 8, 4, 2 }, { 1, 2, 4, 2, 1 }
};
Texture2D<float> SSAO;
static float ssao;
void calculateSSAO(int2 ida);
#endif

//#if SEGMENTED_MASK
//Texture2D<float> ClippingMask;
//sampler3D LabelMap;
//#endif

//float SegmentOpacity;
float4 Dimensions;
//Texture2D<float> CarvingUsed;
//Texture2D<float4> CarvingNormals;
float4x4 MatrixM;
float4x4 MatrixMV; 
static const float4x4 M = float4x4(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
float4x4 CarvingMatrixMVP[] = { M, M, M, M, M, M, M, M };
RWTexture2D<float4> VolumeImage;
float4 ViewerPositionW;
float4 LightPositionW;
float4 FogColor;
float CameraFarClip;
//int ShadingMode;
float SampleStepSize;

#if !NO_CARVING
Texture2DArray<float2> CarvingArray;
SamplerState samplerCarvingArray;
uint3 dimensionsCarvingArray;
#endif

int Xstart;
int Ystart;

static float4 positionDepth;
static int3 dimensions;

float calculateDepthFromNC(float3 positionNC);
float3 calculateShading(float4 positionDepth, float4 colorOpacity);

//RWStructuredBuffer<int> timeoutBuffer;

#if !SEGMENTED
float getIntensity(float3 position_nc)
{
    return tex3Dlod(Intensities, float4(position_nc, 0)).r;
}

float4 getColorOpacityTF(float intensity)
{
    return tex2Dlod(ColorOpacityTF, float4(intensity, 0, 0, 0));
}
#endif

#if PHONG || PHONG_LAO || PHONG_SSAO
float3 getNormal(float3 position_nc)
{
    float3 normalSampled = tex3Dlod(Normals, float4(position_nc.x, position_nc.y, position_nc.z, 0.f)).xyz;
    return (normalSampled * 2.f) - float3(1.f, 1.f, 1.f);
}
#endif

float getLao(float3 position_nc)
{
    float lao = tex3Dlod(Lao, float4(position_nc, 0)).r;
    float laoAdjusted = lao * LaoBrightness;
    return clamp(laoAdjusted, 0., 2.);
}



bool isClipped(float3 voxelPositionNc)
{
    bool clipped = false;
    
    float4 currentPosP;
    float2 pixelCoordinateOfVoxel;
    float2 carvingValues;
    
//#if SEGMENTED_MASK
//    int label = (int)tex3Dlod(LabelMap, float4(voxelPositionNc, 0)).r;
//#endif
    
#if !NO_CARVING    
    for (int i = 0; i < (int) dimensionsCarvingArray.z; i++)
    {
        currentPosP = mul(CarvingMatrixMVP[i], float4(voxelPositionNc - float3(0.5, 0.5, 0.5), 1.f));
        currentPosP /= currentPosP.w;
        pixelCoordinateOfVoxel = (currentPosP.xy + float2(1, 1)) * 0.5;
        pixelCoordinateOfVoxel.y = 1 - pixelCoordinateOfVoxel.y;
        carvingValues = CarvingArray.SampleLevel(samplerCarvingArray, float3(pixelCoordinateOfVoxel.xy, i), 0); //tex2Dlod(CarvingDepth7, float4(pixelCoordinateOfVoxel.xy, 0, 0));
        clipped = clipped || currentPosP.z < carvingValues.r && currentPosP.z > carvingValues.g;
    }
#endif
    
    return clipped;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{    
    int2 ida = id.xy + int2(Xstart, Ystart);
    
    uint dimensionsX, dimensionsY, dimensionsZ;
    dimensions = int3(Dimensions.x, Dimensions.y, Dimensions.z);

    uint textureWidth;
    uint textureHeight;
    PositionDepth.GetDimensions(textureWidth, textureHeight);
    if (ida.x >= (int)textureWidth || ida.y >= (int)textureHeight)
    {
        return;
    }

    // Read data obtained during VolumeRaycasting step
    positionDepth = PositionDepth[ida];
    float4 directionSteps = DirectionSteps[ida];
    
    float3 direction = directionSteps.xyz;
    int steps = directionSteps.w;
	
	// Early termination, no color
    if (steps <= 0)
    {
        return;
    }
    
#if !NO_CARVING
    CarvingArray.GetDimensions(dimensionsCarvingArray.x, dimensionsCarvingArray.y, dimensionsCarvingArray.z);
#endif
    
    // // Carving
    //carvingNormal = (float3(1, 1, 1) * 2.) - float3(1, 1, 1);
    //carvingIsUsed = false;
#if PHONG_SSAO
    calculateSSAO(ida);
#endif
    
    // Classification and compositing
    float4 finalColor = float4(0, 0, 0, 0);
    float3 currentPosition = positionDepth.xyz;
    int i = 0;
    
    while (finalColor.a <= 0.99 && i < steps)
    {

        if (!isClipped(currentPosition))
        {
#if !SEGMENTED
            // Transforming intensity to opacity
            float intensity = getIntensity(currentPosition);

            if (intensity >= IntensityThreshold)
            {
                float4 colorOpacity = getColorOpacityTF(intensity);
#else
            float opacity = tex3Dlod(OpacityMap, float4(currentPosition, 0)).r;
                
            if (opacity > 0)
            {
                //float intensity = getIntensity(currentPosition);
                float4 colorOpacity = float4(0, 0, 0, opacity);
                //colorOpacity.a = opacity;
#endif
        
                float depth = calculateDepthFromNC(currentPosition);
            
                float4 color;
                color.rgb = calculateShading(float4(currentPosition, depth), colorOpacity);
                color.a = colorOpacity.a;
            
                // Adjust opacity for smaller or larger step sizes
                color.a = 1.0 - pow(abs(1.0 - color.a), SampleStepSize);
		
                float oneMinusDstAlpha = 1.0 - finalColor.a;
                finalColor.rgb += oneMinusDstAlpha * color.a * color.rgb;
                finalColor.a += oneMinusDstAlpha * color.a;
                
#if COLOR_UNIQUE_LABEL
                bool visible = true;
                
#if SEGMENT_CARVING
                visible = tex3Dlod(CarvingMap, float4(currentPosition, 0)).r > 0.5;
#endif
                if (visible && (color.r > 0.0 || color.g > 0.0 || color.b > 0.0))
                {
                    finalColor.rgb = color.rgb;
                    finalColor.a = 1.0;
                    break;
                }
#endif
            }
        }
        
        i++;
        currentPosition += direction;
    }
    
#if COLOR_UNIQUE_LABEL
    if (finalColor.r == 0.0 && finalColor.g == 0.0 && finalColor.b == 0.0)
    {
        finalColor.a = 0.0;
        VolumeImage[ida] = finalColor;
        return;
    }
#endif

    VolumeImage[ida] = finalColor;
    //timeoutBuffer[0] = 12;
}

float calculateDepthFromNC(float3 positionNC)
{
    float4 currentPosV = mul(MatrixMV, float4(positionNC - float3(0.5, 0.5, 0.5), 1.f));
    float z = currentPosV.z / currentPosV.w;    
    return z;
}

#if COLOR_LABEL
float3 getSegmentColor(float4 currentPosition)
{
    int label = (int)tex3Dlod(LabelMap, float4(currentPosition.xyz, 0)).r;
    float4 colorOfLabel = SegmentColors[int2(label, 0)];
    //float3 combinedColor = lerp(color, colorOfLabel.rgb, SegmentOpacity.xxx * colorOfLabel.a);
    
    return colorOfLabel;

}
#elif COLOR_HISTOGRAM || COLOR_SLICER
float3 getSegmentColor(float4 currentPosition)
{
    float4 colorOfLabel = tex3Dlod(ColorMap, float4(currentPosition.xyz, 0));

    //colorOfLabel *= colorOfLabel.a;

    //float3 combinedColor = lerp(color, colorOfLabel.rgb, SegmentOpacity.xxx);
    
    return colorOfLabel.rgb;

}
#elif COLOR_UNIQUE_LABEL
float3 getSegmentColor(float4 currentPosition)
{
    uint label = (int)(tex3Dlod(LabelMap, float4(currentPosition.xyz, 0)).r);

    uint r = label % 10;
    uint g = (label / 10) % 10;
    uint b = (label / 100) % 10;
    
    float3 colorOfLabel = float3(r, g, b) * 25.0;
    
    return colorOfLabel / 255.0;

}
#endif

// ============== Phong ==============

#if PHONG || PHONG_LAO || PHONG_SSAO
float3 calculatePhong(float4 currentPosition, float4 colorOpacity)
{
    // Normals
    float3 normalSampled = getNormal(currentPosition.xyz);
    float3 normalU = mul(MatrixM, float4(normalSampled.x, normalSampled.y, normalSampled.z, 0.f)).xyz;
    float3 normalFromTexture = normalize(normalU);
    
    float3 normal = normalFromTexture; //lerp(normalFrom[[Texture, normalize(carvingNormal), carvingNormalFactor);
    //normal = normalize(normal);

    // Position of sample in World coordinates
    float4 currentPosW = mul(MatrixM, float4(currentPosition.xyz - float3(0.5, 0.5, 0.5), 1.f));
    currentPosW /= currentPosW.w;
    
    // Blinn-Phong variables
    float3 blinnN = normal;
    float3 blinnV = normalize((LightPositionW - currentPosW).xyz);
    float3 blinnL = normalize((ViewerPositionW - currentPosW).xyz);

    // Blinn-Phong calculations
    float blinnLVnorm = length(blinnL + blinnV);
    float3 blinnH = blinnLVnorm > 0.f ? (blinnL + blinnV) / blinnLVnorm : float3(0, 0, 0);
    float blinnLN = dot(blinnL, blinnN);
    float blinnNH = dot(blinnN, blinnH);

	// Phong factors
    float diffuse = max(blinnLN, 0.f);
    float specular = pow(max(blinnNH, 0), SpecularExponent);
    
    float3 phong = float3(0, 0, 0);

    phong += AmbientFactor * colorOpacity.rgb;
    phong += DiffuseFactor * diffuse * colorOpacity.rgb;
    phong += SpecularFactor * specular;  
    
    return phong;
}
#endif

//float3 calculateLao(float4 currentPosition, float4 colorOpacity)
//{
//    float lao = getLao(currentPosition.xyz);
//    float3 finalColor = colorOpacity.rgb * lao;
//    return finalColor;
//    //return float3(laoAdjusted, laoAdjusted, laoAdjusted);
//}

float3 addLao(float4 currentPosition, float3 color)
{
    float ambientOcclusionFactor = getLao(currentPosition.xyz);
    return clamp(color * ambientOcclusionFactor, float3(0, 0, 0), float3(1, 1, 1));
}

#if PHONG_SSAO
void calculateSSAO(int2 ida)
{
    ssao = 0;
    float total = 0;

    [unroll]
    for (int i = 0; i < 5; i++)
    {
        [unroll]
        for (int j = 0; j < 5; j++)
        {
            float factor = SOBEL_MATRIX_5[i][j];
            int2 position = ida + int2(i - 2, j - 2);
            ssao += SSAO[position] * factor;
            total += factor;
        }
    }

    ssao = ssao * 2.0 / total;

    //ssao = SSAO[ida] * 2.0;
}

float3 addSSAO(float3 color)
{
    return clamp(color * ssao, float3(0,0,0), float3(1,1,1));
}
#endif

float3 calculateShading(float4 currentPosition, float4 colorOpacity)
{
#if COLOR_LABEL || COLOR_HISTOGRAM || COLOR_UNIQUE_LABEL || COLOR_SLICER // || SEGMENT_COLOR || DILATED_LABELS 
    colorOpacity.rgb = getSegmentColor(currentPosition);
#endif 
    
    float3 color;
#if SOLID_COLOR
    color = colorOpacity.rgb;
#elif LAO
    // Calculate LAO
    color = addLao(currentPosition, colorOpacity.rgb);
#elif PHONG || PHONG_LAO || PHONG_SSAO
    // Calculate Phong
    color = calculatePhong(currentPosition, colorOpacity);
    #if PHONG_SSAO
    color = addSSAO(color);
    #elif PHONG_LAO
    color = addLao(currentPosition, color);
    #endif

#else
    color = colorOpacity.rgb;
#endif
    
    return color;
}